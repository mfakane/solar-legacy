<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:local="clr-namespace:Solar"
		xmlns:models="clr-namespace:Solar.Models"
		xmlns:interop="clr-namespace:Ignition.Presentation;assembly=Ignition.Presentation"
		xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		mc:Ignorable="d"
		x:Class="Solar.MainWindow"
		Icon="../solar.ico"
		Title="Solar"
		Loaded="Window_Loaded"
		Closing="Window_Closing"
		Width="360"
		Height="480"
		Style="{StaticResource WindowStyle}"
		DataContext="{DynamicResource ViewModel}"
		StateChanged="Window_StateChanged">
	<Window.Resources>
		<local:MainWindowViewModel x:Key="ViewModel" />
		<local:KeyGestureStringConverter x:Key="KeyGestureStringConverter" />
		<local:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter" />
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
		<Style x:Key="TabItemFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="3,3,3,1"
								   SnapsToDevicePixels="true"
								   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								   StrokeThickness="1"
								   StrokeDashArray="1 2" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="TabControlNormalBorderBrush"
						 Color="#8C8E94" />
		<LinearGradientBrush x:Key="ButtonNormalBackground"
							 EndPoint="0,1"
							 StartPoint="0,0">
			<GradientStop Color="#F3F3F3"
						  Offset="0" />
			<GradientStop Color="#EBEBEB"
						  Offset="0.5" />
			<GradientStop Color="#DDDDDD"
						  Offset="0.5" />
			<GradientStop Color="#CDCDCD"
						  Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="TabItemHotBackground"
							 EndPoint="0,1"
							 StartPoint="0,0">
			<GradientStop Color="#EAF6FD"
						  Offset="0.15" />
			<GradientStop Color="#D9F0FC"
						  Offset=".5" />
			<GradientStop Color="#BEE6FD"
						  Offset=".5" />
			<GradientStop Color="#A7D9F5"
						  Offset="1" />
		</LinearGradientBrush>
		<SolidColorBrush x:Key="TabItemSelectedBackground"
						 Color="#F9F9F9" />
		<SolidColorBrush x:Key="TabItemHotBorderBrush"
						 Color="#3C7FB1" />
		<SolidColorBrush x:Key="TabItemDisabledBackground"
						 Color="#F4F4F4" />
		<SolidColorBrush x:Key="TabItemDisabledBorderBrush"
						 Color="#FFC9C7BA" />
		<Style TargetType="{x:Type TabItem}">
			<Setter Property="Margin"
					Value="0,0,-1,0" />
			<Setter Property="Padding"
					Value="4,0,4,0" />
			<Setter Property="BorderBrush"
					Value="{StaticResource TabControlNormalBorderBrush}" />
			<Setter Property="Background"
					Value="{StaticResource ButtonNormalBackground}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabItem}">
						<Grid SnapsToDevicePixels="true">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="MouseOver" />
									<VisualState x:Name="Disabled" />
								</VisualStateGroup>
								<VisualStateGroup x:Name="SelectionStates">
									<VisualState x:Name="Unselected" />
									<VisualState x:Name="Selected" />
								</VisualStateGroup>
								<VisualStateGroup x:Name="FocusStates">
									<VisualState x:Name="Unfocused" />
									<VisualState x:Name="Focused" />
								</VisualStateGroup>
								<VisualStateGroup x:Name="ValidationStates">
									<VisualState x:Name="Valid" />
									<VisualState x:Name="InvalidFocused" />
									<VisualState x:Name="InvalidUnfocused" />
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Border x:Name="Bd"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="1,0,1,1"
									Background="{TemplateBinding Background}"
									Padding="6,1"
									Height="19">
								<ContentPresenter x:Name="Content"
												  ContentSource="Header"
												  RecognizesAccessKey="True"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver"
									 Value="true">
								<Setter Property="Background"
										TargetName="Bd"
										Value="{StaticResource TabItemHotBackground}" />
							</Trigger>
							<Trigger Property="IsSelected"
									 Value="true">
								<Setter Property="Panel.ZIndex"
										Value="1" />
								<Setter Property="Background"
										TargetName="Bd"
										Value="{StaticResource TabItemSelectedBackground}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected"
											   Value="false" />
									<Condition Property="IsMouseOver"
											   Value="true" />
								</MultiTrigger.Conditions>
								<Setter Property="BorderBrush"
										TargetName="Bd"
										Value="{StaticResource TabItemHotBorderBrush}" />
							</MultiTrigger>
							<Trigger Property="IsEnabled"
									 Value="false">
								<Setter Property="Background"
										TargetName="Bd"
										Value="{StaticResource TabItemDisabledBackground}" />
								<Setter Property="BorderBrush"
										TargetName="Bd"
										Value="{StaticResource TabItemDisabledBorderBrush}" />
								<Setter Property="Foreground"
										Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="{x:Type TabControl}">
			<Setter Property="Foreground"
					Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="Padding"
					Value="0" />
			<Setter Property="BorderThickness"
					Value="1" />
			<Setter Property="BorderBrush"
					Value="{StaticResource TabControlNormalBorderBrush}" />
			<Setter Property="Background"
					Value="#F9F9F9" />
			<Setter Property="HorizontalContentAlignment"
					Value="Center" />
			<Setter Property="VerticalContentAlignment"
					Value="Center" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabControl}">
						<Grid ClipToBounds="true"
							  SnapsToDevicePixels="true"
							  KeyboardNavigation.TabNavigation="Local">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<!--<StackPanel Orientation="Horizontal"
										IsItemsHost="True"
										Background="{StaticResource ButtonNormalBackground}" />-->
							<Grid Background="#CDCDCD">
								<Grid Height="18"
									  Background="{StaticResource ButtonNormalBackground}"
									  VerticalAlignment="Top" />
								<WrapPanel Orientation="Horizontal"
										   IsItemsHost="True"
										   Margin="0,0,0,-1" />
							</Grid>
							<Border BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}"
									Grid.Column="0"
									KeyboardNavigation.DirectionalNavigation="Contained"
									Grid.Row="1"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local">
								<ContentPresenter x:Name="PART_SelectedContentHost"
												  HorizontalAlignment="Stretch"
												  VerticalAlignment="Stretch"
												  ContentSource="SelectedContent"
												  Margin="{TemplateBinding Padding}"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled"
									 Value="false">
								<Setter Property="Foreground"
										Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<KeyBinding x:Key="RefreshBinding"
					Command="{Binding RefreshCommand}"
					Key="{Binding Key.Refresh.Key, Source={x:Static models:Settings.Default}}"
					Modifiers="{Binding Key.Refresh.Modifiers, Source={x:Static models:Settings.Default}}" />
		<KeyBinding x:Key="SearchStatusesBinding"
					Command="{Binding SearchStatusesCommand}"
					Key="{Binding Key.SearchStatuses.Key, Source={x:Static models:Settings.Default}}"
					Modifiers="{Binding Key.SearchStatuses.Modifiers, Source={x:Static models:Settings.Default}}" />
		<KeyBinding x:Key="SearchUsersBinding"
					Command="{Binding SearchUsersCommand}"
					Key="{Binding Key.SearchUsers.Key, Source={x:Static models:Settings.Default}}"
					Modifiers="{Binding Key.SearchUsers.Modifiers, Source={x:Static models:Settings.Default}}" />
		<KeyBinding x:Key="SearchCacheBinding"
					Command="{Binding SearchCacheCommand}"
					Key="{Binding Key.SearchCache.Key, Source={x:Static models:Settings.Default}}"
					Modifiers="{Binding Key.SearchCache.Modifiers, Source={x:Static models:Settings.Default}}" />
		<KeyBinding x:Key="QueryCacheBinding"
					Command="{Binding QueryCacheCommand}"
					Key="{Binding Key.QueryCache.Key, Source={x:Static models:Settings.Default}}"
					Modifiers="{Binding Key.QueryCache.Modifiers, Source={x:Static models:Settings.Default}}" />
	</Window.Resources>
	<Window.InputBindings>
		<StaticResource ResourceKey="RefreshBinding" />
		<StaticResource ResourceKey="SearchStatusesBinding" />
		<StaticResource ResourceKey="SearchUsersBinding" />
		<StaticResource ResourceKey="SearchCacheBinding" />
		<StaticResource ResourceKey="QueryCacheBinding" />
	</Window.InputBindings>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<interop:NotificationAreaIcon x:Name="notificationAreaIcon"
									  Text="Solar"
									  Icon="../solar.ico"
									  Visibility="Hidden"
									  MouseClick="NotificationAreaIcon_MouseClick">
			<interop:NotificationAreaIcon.ContextMenu>
				<ContextMenu>
					<MenuItem Header="終了(_X)"
							  Click="ExitMenuItem_Click" />
				</ContextMenu>
			</interop:NotificationAreaIcon.ContextMenu>
		</interop:NotificationAreaIcon>
		<Menu Name="mainMenu"
			  Panel.ZIndex="1">
			<Menu.Resources>
				<Style x:Key="AccountMenuItem"
					   TargetType="{x:Type MenuItem}"
					   BasedOn="{StaticResource {x:Type MenuItem}}">
					<Setter Property="ItemContainerStyle">
						<Setter.Value>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Setter Property="Command"
										Value="{Binding Command, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}, Mode=FindAncestor}}" />
								<Setter Property="CommandParameter"
										Value="{Binding}" />
							</Style>
						</Setter.Value>
					</Setter>
					<Setter Property="ItemTemplate">
						<Setter.Value>
							<DataTemplate>
								<TextBlock Text="{Binding}" />
							</DataTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Menu.Resources>
			<MenuItem Header="ファイル(_F)">
				<MenuItem Header="終了(_X)"
						  Click="ExitMenuItem_Click"
						  InputGestureText="Alt+F4" />
			</MenuItem>
			<MenuItem Header="表示(_V)">
				<MenuItem Header="最新の情報に更新(_R)"
						  Command="{Binding RefreshCommand}"
						  InputGestureText="{Binding Gesture, Source={StaticResource RefreshBinding}, Converter={StaticResource KeyGestureStringConverter}}" />
				<Separator />
				<MenuItem Header="一覧の表示形式(_T)">
					<MenuItem Header="全文表示(_F)"
							  Command="{Binding SetTimelineCommand}"
							  CommandParameter="Full">
						<MenuItem.Style>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
												 Value="Full">
										<Setter Property="IsChecked"
												Value="True" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</MenuItem.Style>
					</MenuItem>
					<MenuItem Header="セミ表示(_S)"
							  Command="{Binding SetTimelineCommand}"
							  CommandParameter="Semi">
						<MenuItem.Style>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
												 Value="Semi">
										<Setter Property="IsChecked"
												Value="True" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</MenuItem.Style>
					</MenuItem>
					<MenuItem Header="一行表示(_S)"
							  Command="{Binding SetTimelineCommand}"
							  CommandParameter="Single">
						<MenuItem.Style>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
												 Value="Single">
										<Setter Property="IsChecked"
												Value="True" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</MenuItem.Style>
					</MenuItem>
				</MenuItem>
				<Separator />
				<MenuItem Header="自分(_S)"
						  Command="{Binding ShowProfileCommand}"
						  ItemsSource="{Binding AccountsExceptSingle}"
						  Style="{StaticResource AccountMenuItem}" />
				<MenuItem Header="フォロー(_G)"
						  Command="{Binding ShowFollowingCommand}"
						  ItemsSource="{Binding AccountsExceptSingle}"
						  Style="{StaticResource AccountMenuItem}" />
				<MenuItem Header="フォロワー(_E)"
						  Command="{Binding ShowFollowersCommand}"
						  ItemsSource="{Binding AccountsExceptSingle}"
						  Style="{StaticResource AccountMenuItem}" />
				<MenuItem Header="リスト(_L)">
					<MenuItem Header="自分が作成したリスト(_L)"
							  Command="{Binding ShowListsCommand}"
							  ItemsSource="{Binding AccountsExceptSingle}"
							  Style="{StaticResource AccountMenuItem}" />
					<MenuItem Header="フォローしているリスト(_S)"
							  Command="{Binding ShowSubscriptionsCommand}"
							  ItemsSource="{Binding AccountsExceptSingle}"
							  Style="{StaticResource AccountMenuItem}" />
					<MenuItem Header="フォローされているリスト(_M)"
							  Command="{Binding ShowMembershipsCommand}"
							  ItemsSource="{Binding AccountsExceptSingle}"
							  Style="{StaticResource AccountMenuItem}" />
				</MenuItem>
				<Separator />
				<MenuItem Header="リアルタイム更新(_R)"
						  IsEnabled="{Binding IsUserStreamEnabled}"
						  IsCheckable="True"
						  IsChecked="{Binding IsUserStreamRunning}" />
				<Separator />
				<MenuItem Header="ダイレクトメッセージを送る"
						  Command="{Binding StatusesListBoxCommandHandler.DirectMessageCommand}" />
			</MenuItem>
			<MenuItem Header="検索(_S)">
				<MenuItem Header="つぶやきの検索(_E)..."
						  Command="{Binding SearchStatusesCommand}"
						  InputGestureText="{Binding Gesture, Source={StaticResource SearchStatusesBinding}, Converter={StaticResource KeyGestureStringConverter}}" />
				<MenuItem Header="ユーザの検索(_A)..."
						  Command="{Binding SearchUsersCommand}"
						  InputGestureText="{Binding Gesture, Source={StaticResource SearchUsersBinding}, Converter={StaticResource KeyGestureStringConverter}}" />
				<Separator />
				<MenuItem Header="キャッシュから検索(_C)..."
						  Command="{Binding SearchCacheCommand}"
						  InputGestureText="{Binding Gesture, Source={StaticResource SearchCacheBinding}, Converter={StaticResource KeyGestureStringConverter}}" />
				<MenuItem Header="キャッシュへクエリ(_Q)..."
						  Command="{Binding QueryCacheCommand}"
						  InputGestureText="{Binding Gesture, Source={StaticResource QueryCacheBinding}, Converter={StaticResource KeyGestureStringConverter}}" />
			</MenuItem>
			<MenuItem Header="ツール(_T)">
				<MenuItem Header="フォローの整理(_F)"
						  Command="{Binding OrganizeFollowsCommand}"
						  ItemsSource="{Binding AccountsExceptSingle}"
						  Style="{StaticResource AccountMenuItem}" />
				<Separator />
				<MenuItem Header="キャッシュ(_C)"
						  Command="{Binding CacheCommand}" />
				<MenuItem Header="コンソール(_O)"
						  Command="{Binding ConsoleCommand}" />
				<Separator />
				<MenuItem Header="フッタ(_F)..."
						  Command="{Binding FootersCommand}" />
				<Separator />
				<MenuItem Header="レイアウト(_L)..."
						  Command="{Binding LayoutCommand}" />
				<MenuItem Header="アカウント(_A)..."
						  Command="{Binding AccountsCommand}" />
			</MenuItem>
			<MenuItem Header="ヘルプ(_H)">
				<MenuItem Header="ソフトウェアの更新を確認(_C)"
						  Command="{Binding CheckSoftwareUpdatesCommand}" />
				<Separator />
				<MenuItem Header="バージョン情報(_A)"
						  Command="{Binding AboutCommand}" />
			</MenuItem>
		</Menu>
		<Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
				Grid.Row="1"
				Background="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
				BorderThickness="0,1,0,0">
			<Border.Style>
				<Style TargetType="{x:Type Border}">
					<Style.Triggers>
						<DataTrigger Binding="{Binding InReplyToStatus}"
									 Value="{x:Null}">
							<Setter Property="Visibility"
									Value="Collapsed" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Border.Style>
			<Grid Margin="4">
				<Grid.Resources>
					<Style TargetType="{x:Type Hyperlink}"
						   BasedOn="{StaticResource {x:Type Hyperlink}}">
						<Setter Property="Foreground"
								Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
					</Style>
				</Grid.Resources>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<TextBlock>
					<Run Text="次へ返信" />
					<Hyperlink Command="{Binding StatusesListBoxCommandHandler.UserDetailsCommand}"
							   CommandParameter="{Binding InReplyToStatus}"><Run Text="@" /><Run Text="{Binding InReplyToStatus.UserName, Mode=OneWay}" /></Hyperlink><Run Text=": " />
				</TextBlock>
				<ContentControl Grid.Column="1">
					<ContentControl.Resources>
						<Style TargetType="{x:Type TextBlock}">
							<Setter Property="TextTrimming"
									Value="CharacterEllipsis" />
						</Style>
					</ContentControl.Resources>
					<ContentControl.Content>
						<Binding Path="InReplyToStatus">
							<Binding.Converter>
								<local:LinkConverter />
							</Binding.Converter>
						</Binding>
					</ContentControl.Content>
				</ContentControl>
				<Button Grid.Column="2"
						VerticalAlignment="Center"
						Margin="4,0,0,0"
						Command="{Binding ClearInReplyToCommand}">
					<Button.Style>
						<Style TargetType="{x:Type Button}">
							<Style.Triggers>
								<Trigger Property="IsMouseOver"
										 Value="True">
									<Setter Property="Content">
										<Setter.Value>
											<Image Source="../Resources/CloseButtonHover.png" />
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsPressed"
										 Value="True">
									<Setter Property="Content">
										<Setter.Value>
											<Image Source="../Resources/CloseButtonPressed.png" />
										</Setter.Value>
									</Setter>
								</Trigger>
							</Style.Triggers>
							<Setter Property="Content">
								<Setter.Value>
									<Image Source="../Resources/CloseButton.png" />
								</Setter.Value>
							</Setter>
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type Button}">
										<ContentPresenter />
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</Button.Style>
				</Button>
			</Grid>
		</Border>
		<Border Background="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
				BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
				BorderThickness="0,1,0,0"
				Grid.Row="2"
				Visibility="{Binding IsDirectMessage, Converter={StaticResource BooleanToVisibilityConverter}}">
			<Grid Margin="4">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<ComboBox Height="23"
						  Width="120"
						  IsEditable="True"
						  ItemsSource="{Binding FollowerNames}"
						  Text="{Binding DirectMessageDestination}" />
				<TextBlock Text=" へのダイレクトメッセージ"
						   Grid.Column="1"
						   Margin="0,3,0,0" />
				<Button Command="{Binding ClearDirectMessageCommand}"
						Grid.Column="2"
						Margin="4,0,0,0"
						VerticalAlignment="Center">
					<Button.Style>
						<Style TargetType="{x:Type Button}">
							<Style.Triggers>
								<Trigger Property="UIElement.IsMouseOver"
										 Value="True">
									<Setter Property="ContentControl.Content">
										<Setter.Value>
											<Image Source="../Resources/CloseButtonHover.png" />
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="ButtonBase.IsPressed"
										 Value="True">
									<Setter Property="ContentControl.Content">
										<Setter.Value>
											<Image Source="../Resources/CloseButtonPressed.png" />
										</Setter.Value>
									</Setter>
								</Trigger>
							</Style.Triggers>
							<Setter Property="ContentControl.Content">
								<Setter.Value>
									<Image Source="../Resources/CloseButton.png" />
								</Setter.Value>
							</Setter>
							<Setter Property="Control.Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type Button}">
										<ContentPresenter />
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</Button.Style>
				</Button>
			</Grid>
		</Border>
		<TextBox Name="postTextBox"
				 Grid.Row="3"
				 AcceptsReturn="True"
				 TextWrapping="Wrap"
				 Text="{Binding PostText}"
				 PreviewKeyDown="postTextBox_PreviewKeyDown"
				 GotFocus="postTextBox_GotFocus"
				 LostFocus="postTextBox_LostFocus"
				 TextChanged="postTextBox_TextChanged">
			<TextBox.ContextMenu>
				<ContextMenu Name="postTextBoxContextMenu">
					<MenuItem Header="切り取り(_T)"
							  Command="Cut" />
					<MenuItem Header="コピー(_C)"
							  Command="Copy" />
					<MenuItem Header="貼り付け(_P)"
							  Command="Paste" />
					<Separator />
					<MenuItem Header="_URL 短縮"
							  Command="{Binding ShortenUrlCommand}"
							  ItemsSource="{Binding UrlShorteners}">
						<MenuItem.ItemContainerStyle>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Setter Property="Command"
										Value="{Binding Command, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}, Mode=FindAncestor}}" />
								<Setter Property="CommandParameter"
										Value="{Binding}" />
							</Style>
						</MenuItem.ItemContainerStyle>
					</MenuItem>
					<MenuItem Header="フッタ(_F)"
							  Command="{Binding FootersCommand}"
							  ItemsSource="{Binding Post.Footers, Source={x:Static models:Settings.Default}}">
						<MenuItem.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Text}" />
							</DataTemplate>
						</MenuItem.ItemTemplate>
						<MenuItem.ItemContainerStyle>
							<Style TargetType="{x:Type MenuItem}"
								   BasedOn="{StaticResource {x:Type MenuItem}}">
								<Setter Property="IsChecked"
										Value="{Binding Use}" />
								<Setter Property="IsCheckable"
										Value="True" />
								<Setter Property="StaysOpenOnClick"
										Value="True" />
								<EventSetter Event="Click"
											 Handler="FooterMenuItem_Click" />
							</Style>
						</MenuItem.ItemContainerStyle>
					</MenuItem>
				</ContextMenu>
			</TextBox.ContextMenu>
			<TextBox.Style>
				<Style TargetType="{x:Type TextBox}"
					   BasedOn="{StaticResource {x:Type TextBox}}">
					<Setter Property="Foreground"
							Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0"
												 EndPoint="0,1">
								<GradientStop Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"
											  Offset="0" />
								<GradientStop Color="{Binding PostTextBoxBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
											  Offset="0.1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="MinHeight"
							Value="25" />
					<Setter Property="BorderBrush"
							Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
					<Setter Property="BorderThickness"
							Value="0,1,0,0" />
					<Setter Property="Padding"
							Value="1" />
					<Setter Property="FocusVisualStyle"
							Value="{x:Null}" />
					<Setter Property="ScrollViewer.PanningMode"
							Value="VerticalFirst" />
					<Setter Property="Stylus.IsFlicksEnabled"
							Value="False" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type TextBox}">
								<Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd"
																		BorderBrush="{TemplateBinding BorderBrush}"
																		BorderThickness="{TemplateBinding BorderThickness}"
																		Background="{TemplateBinding Background}"
																		RenderMouseOver="{TemplateBinding IsMouseOver}"
																		RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
																		SnapsToDevicePixels="True">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>
										<local:DropDownButton VerticalAlignment="Top"
															  Grid.RowSpan="2"
															  Background="{x:Null}"
															  BorderBrush="{x:Null}"
															  BorderThickness="0"
															  Width="22"
															  Height="22"
															  Visibility="Collapsed">
											<Image Margin="-4"
												   Source="../Resources/Twitter.png" />
										</local:DropDownButton>
										<ScrollViewer Name="PART_ContentHost"
													  Margin="0,2,0,0"
													  Grid.Column="2"
													  Grid.RowSpan="2"
													  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
										<TextBlock Name="placeholder"
												   Cursor="IBeam"
												   Opacity="0.75"
												   Grid.Column="2"
												   Grid.RowSpan="2"
												   Visibility="Visible"
												   HorizontalAlignment="Left"
												   Text="What's happening?"
												   Margin="3,3,0,0"
												   Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
										<TextBlock Name="length"
												   Visibility="Collapsed"
												   HorizontalAlignment="Right"
												   VerticalAlignment="Center"
												   Text="{Binding Text.Length, RelativeSource={RelativeSource AncestorType={x:Type TextBox}, Mode=FindAncestor}}"
												   Grid.Column="3"
												   Margin="0,1,3,1"
												   Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
										<ComboBox Name="comboBox"
												  HorizontalAlignment="Right"
												  SelectedValue="{Binding DataContext.PostAccount, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
												  ItemsSource="{Binding Accounts, Source={StaticResource ViewModel}}"
												  Grid.Row="1"
												  Grid.Column="2"
												  Grid.ColumnSpan="2"
												  Background="{x:Null}"
												  BorderBrush="{x:Null}"
												  Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
												  BorderThickness="0"
												  VerticalAlignment="Bottom"
												  Visibility="{Binding DataContext.IsMultiAccount, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<ItemsControl Name="accountCheckBoxes"
													  Grid.Row="2"
													  Grid.ColumnSpan="4"
													  ItemsSource="{Binding Accounts, Source={StaticResource ViewModel}}"
													  Visibility="{Binding IsMultiAccount, Source={StaticResource ViewModel}, Converter={StaticResource BooleanToVisibilityConverter}}">
											<ItemsControl.ItemsPanel>
												<ItemsPanelTemplate>
													<StackPanel Orientation="Horizontal"
																Margin="2,0,0,0" />
												</ItemsPanelTemplate>
											</ItemsControl.ItemsPanel>
											<ItemsControl.ItemTemplate>
												<DataTemplate>
													<CheckBox Margin="0,0,8,0"
															  Content="{Binding}"
															  IsChecked="{Binding IsSelected}"
															  MouseDown="AccountCheckBox_MouseDown">
														<CheckBox.Style>
															<Style TargetType="{x:Type CheckBox}">
																<Style.Triggers>
																	<Trigger Property="IsChecked"
																			 Value="False">
																		<Setter Property="Foreground"
																				Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
																		<Setter Property="Opacity"
																				Value="0.75" />
																	</Trigger>
																</Style.Triggers>
															</Style>
														</CheckBox.Style>
													</CheckBox>
												</DataTemplate>
											</ItemsControl.ItemTemplate>
										</ItemsControl>
									</Grid>
								</Microsoft_Windows_Themes:ListBoxChrome>
								<ControlTemplate.Triggers>
									<DataTrigger Binding="{Binding Interface.AccountBoxStyle, Source={x:Static models:Settings.Default}}"
												 Value="DropDownRight">
										<Setter TargetName="accountCheckBoxes"
												Property="Visibility"
												Value="Collapsed" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Interface.AccountBoxStyle, Source={x:Static models:Settings.Default}}"
												 Value="DropDownLeft">
										<Setter TargetName="accountCheckBoxes"
												Property="Visibility"
												Value="Collapsed" />
										<Setter TargetName="comboBox"
												Property="Grid.Column"
												Value="1" />
										<Setter TargetName="comboBox"
												Property="Grid.ColumnSpan"
												Value="1" />
										<Setter TargetName="comboBox"
												Property="Grid.Row"
												Value="0" />
										<Setter TargetName="comboBox"
												Property="Grid.RowSpan"
												Value="2" />
										<Setter TargetName="comboBox"
												Property="VerticalAlignment"
												Value="Top" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Interface.AccountBoxStyle, Source={x:Static models:Settings.Default}}"
												 Value="CheckBox">
										<Setter TargetName="comboBox"
												Property="Visibility"
												Value="Collapsed" />
									</DataTrigger>
									<Trigger SourceName="comboBox"
											 Property="IsMouseOver"
											 Value="True">
										<Setter TargetName="comboBox"
												Property="Foreground"
												Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									</Trigger>
									<Trigger Property="IsEnabled"
											 Value="false">
										<Setter Property="Background"
												TargetName="Bd"
												Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
										<Setter Property="Foreground"
												Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
									</Trigger>
									<DataTrigger Binding="{Binding CollapsePostBox, Source={x:Static models:Settings.Default}}"
												 Value="False">
										<Setter Property="MinHeight"
												Value="43" />
										<Setter TargetName="length"
												Property="Visibility"
												Value="Visible" />
										<Setter TargetName="placeholder"
												Property="Visibility"
												Value="Collapsed" />
										<Setter TargetName="PART_ContentHost"
												Property="Margin"
												Value="0" />
									</DataTrigger>
									<Trigger Property="IsKeyboardFocused"
											 Value="True">
										<Setter Property="MinHeight"
												Value="43" />
										<Setter TargetName="length"
												Property="Visibility"
												Value="Visible" />
										<Setter TargetName="placeholder"
												Property="Visibility"
												Value="Collapsed" />
										<Setter TargetName="PART_ContentHost"
												Property="Margin"
												Value="0" />
									</Trigger>
									<DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNullOrEmptyConverter}}"
												 Value="False">
										<Setter Property="MinHeight"
												Value="43" />
										<Setter TargetName="length"
												Property="Visibility"
												Value="Visible" />
										<Setter TargetName="placeholder"
												Property="Visibility"
												Value="Collapsed" />
										<Setter TargetName="PART_ContentHost"
												Property="Margin"
												Value="0" />
									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</TextBox.Style>
		</TextBox>
		<Popup Name="postUserPopup"
			   StaysOpen="False">
			<Border BorderThickness="1"
					BorderBrush="Gray">
				<ListBox Name="postUserListBox"
						 BorderThickness="0"
						 BorderBrush="{x:Null}"
						 Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
						 MaxHeight="320">
					<ListBox.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
										 Color="{x:Static SystemColors.HighlightColor}" />
						<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}"
										 Color="{x:Static SystemColors.HighlightTextColor}" />
					</ListBox.Resources>
					<ListBox.ItemTemplate>
						<DataTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<local:IconDisplay Width="16"
												   Height="16"
												   Margin="0,2,2,2"
												   Source="{Binding ProfileImage}" />
								<TextBlock Text="{Binding Name, StringFormat={}@{0}}"
										   Margin="0,0,16,0"
										   VerticalAlignment="Center"
										   Grid.Column="1" />
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
			</Border>
		</Popup>
		<Popup Name="postHashPopup"
			   StaysOpen="False">
			<Border BorderThickness="1"
					BorderBrush="Gray">
				<ListBox Name="postHashListBox"
						 BorderThickness="0"
						 BorderBrush="{x:Null}"
						 Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
						 MaxHeight="320">
					<ListBox.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
										 Color="{x:Static SystemColors.HighlightColor}" />
						<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}"
										 Color="{x:Static SystemColors.HighlightTextColor}" />
					</ListBox.Resources>
					<ListBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding}"
									   Margin="0,2,2,2"
									   Grid.Column="1" />
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
			</Border>
		</Popup>
		<Border BorderBrush="#FF8C8E94"
				BorderThickness="0,1"
				Grid.Row="4">
			<ItemsControl ItemsSource="{Binding Groups}"
						  Margin="-1,0,0,0">
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<UniformGrid Rows="1" />
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
				<ItemsControl.ItemTemplate>
					<DataTemplate>
						<TabControl BorderThickness="1,1,0,0"
									ItemsSource="{Binding}"
									SelectionChanged="TabControl_SelectionChanged">
							<TabControl.ItemContainerStyle>
								<Style TargetType="{x:Type TabItem}"
									   BasedOn="{StaticResource {x:Type TabItem}}">
									<Setter Property="ContextMenu">
										<Setter.Value>
											<ContextMenu>
												<MenuItem Header="最新の情報に更新(_R)"
														  Command="{Binding RefreshCommand, Source={StaticResource ViewModel}}"
														  CommandParameter="{Binding}" />
												<MenuItem Header="一覧をクリア(_C)"
														  Command="{Binding ClearCommand, Source={StaticResource ViewModel}}"
														  CommandParameter="{Binding}" />
												<Separator />
												<MenuItem Header="タブの設定(_S)..."
														  Command="{Binding LayoutCommand, Source={StaticResource ViewModel}}"
														  CommandParameter="{Binding}" />
												<Separator />
												<MenuItem Header="タブを閉じる(_X)"
														  Command="{Binding CloseTabCommand, Source={StaticResource ViewModel}}"
														  CommandParameter="{Binding}" />
											</ContextMenu>
										</Setter.Value>
									</Setter>
								</Style>
							</TabControl.ItemContainerStyle>
							<TabControl.ItemTemplate>
								<DataTemplate>
									<Grid MinHeight="16">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<TextBlock Text="{Binding Name}"
												   VerticalAlignment="Center" />
										<Button Margin="4,0,-5,0"
												VerticalAlignment="Center"
												Height="16"
												Visibility="{Binding HasUnreads, Converter={StaticResource BooleanToVisibilityConverter}}"
												Command="{Binding ClearUnreadsCommand, Source={StaticResource ViewModel}}"
												CommandParameter="{Binding}"
												Grid.Column="1">
											<Button.Template>
												<ControlTemplate TargetType="{x:Type Button}">
													<Grid>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="Auto" />
															<ColumnDefinition />
															<ColumnDefinition Width="Auto" />
														</Grid.ColumnDefinitions>
														<Image Name="left"
															   Source="../Resources/UpdateCountLeft.png"
															   Grid.Column="0"
															   Visibility="Hidden" />
														<Image Name="center"
															   Source="../Resources/UpdateCountCenter.png"
															   Grid.Column="1"
															   Stretch="Fill"
															   Visibility="Hidden" />
														<Image Name="right"
															   Source="../Resources/UpdateCountRight.png"
															   Grid.Column="2"
															   Visibility="Hidden" />
														<TextBlock Text="{Binding Unreads}"
																   Grid.Column="1"
																   Margin="1,0,1,0"
																   HorizontalAlignment="Center"
																   VerticalAlignment="Center"
																   FontWeight="Bold" />
													</Grid>
													<ControlTemplate.Triggers>
														<Trigger Property="IsMouseOver"
																 Value="True">
															<Setter TargetName="left"
																	Property="Visibility"
																	Value="Visible" />
															<Setter TargetName="center"
																	Property="Visibility"
																	Value="Visible" />
															<Setter TargetName="right"
																	Property="Visibility"
																	Value="Visible" />
														</Trigger>
														<Trigger Property="IsPressed"
																 Value="True">
															<Setter TargetName="left"
																	Property="RenderTransform">
																<Setter.Value>
																	<ScaleTransform ScaleY="-1"
																					CenterY="8" />
																</Setter.Value>
															</Setter>
															<Setter TargetName="center"
																	Property="RenderTransform">
																<Setter.Value>
																	<ScaleTransform ScaleY="-1"
																					CenterY="8" />
																</Setter.Value>
															</Setter>
															<Setter TargetName="right"
																	Property="RenderTransform">
																<Setter.Value>
																	<ScaleTransform ScaleY="-1"
																					CenterY="8" />
																</Setter.Value>
															</Setter>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Button.Template>
										</Button>
									</Grid>
								</DataTemplate>
							</TabControl.ItemTemplate>
							<TabControl.ContentTemplate>
								<DataTemplate>
									<local:StatusesListBox ItemsSource="{Binding Statuses}"
														   RequestNewPage="StatusesListBox_RequestNewPage"
														   NewCount="{Binding Unreads}"
														   CommandHandler="{Binding DataContext.StatusesListBoxCommandHandler, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
														   Command="{Binding DataContext.StatusesListBoxCommandHandler.DoubleClickCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
								</DataTemplate>
							</TabControl.ContentTemplate>
						</TabControl>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ItemsControl>
		</Border>
		<StatusBar Name="statusBar"
				   Grid.Row="5">
			<StatusBarItem DockPanel.Dock="Right">
				<StatusBarItem.ToolTip>
					<ItemsControl ItemsSource="{Binding RateLimits}">
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<StackPanel />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<TextBlock>
										<Run Text="{Binding Account.Name, Mode=OneWay}" /><Run Text=": " /><Run Text="{Binding Remaining, Mode=OneWay}" /><Run Text="/" /><Run Text="{Binding Limit, Mode=OneWay}" /><Run Text=" (Reset: " /><Run Text="{Binding Reset, Mode=OneWay, StringFormat=HH:mm:ss}" /><Run Text=")" />
									</TextBlock>
									<TextBlock Grid.Column="1"
											   Text=" [Streaming]"
											   Visibility="{Binding IsStreaming, Converter={StaticResource BooleanToVisibilityConverter}}" />
								</Grid>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</StatusBarItem.ToolTip>
				<TextBlock>
					<Run Text="{Binding RateLimit.Remaining, Mode=OneWay}" /><Run Text="/" /><Run Text="{Binding RateLimit.Limit, Mode=OneWay}" />
				</TextBlock>
			</StatusBarItem>
			<StatusBarItem DockPanel.Dock="Right"
						   Content="{Binding LastUpdate}"
						   ContentStringFormat="最終更新: HH:mm:ss" />
			<StatusBarItem Content="{Binding CurrentProgress.Text}"
						   MouseDown="StatusBarItem_MouseDown" />
		</StatusBar>
		<Grid Background="#99FFFFFF"
			  Visibility="{Binding IsPosting, Converter={StaticResource BooleanToVisibilityConverter}}"
			  Grid.Row="3"
			  Margin="0,1,0,0">
			<ProgressBar Height="15"
						 IsIndeterminate="True"
						 Width="160" />
		</Grid>
	</Grid>
</Window>
